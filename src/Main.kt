import ufoproducts.util.*

import java.io.*
import java.net.*
import java.util.*
//This class generated by IntelliJ Java-to-Kotlin translator!
object Main {
    private val VER = 0.8f
    private var pos = POS()
    private var employees = ArrayList<Employee>()
    private val tennerLog = File("logs${System.getProperty("file.separator")}log.txt")
    private val SysProp = SystemConstants()
    init {
        println("Starting Tenner $VER")
    }
    private fun loginPrompt() {
        while(true) {
            print("login: ")
            try {
                val employee = readLine()?.toInt() ?: 0
                for (x in employees.indices) {
                    if (employees[x].id == employee) {
                        val oS = OrderScreen(employees[x], pos, employees, tennerLog)
                        oS.start()
                    }
                }
            } catch(e: NumberFormatException) {
                break
            }
        }
    }

    private fun tennerAbout() {
        println("Tenner Point-of-Sale")
        println("Version $VER")
        println("Â©UFO Products 2018")
        println("Tenner is licensed under the MIT License.")
    }

    @JvmStatic
    fun main(args: Array<String>) {
        pos = if(args.isEmpty()) {
            POS()
        } else if(args.size == 1) {
            try {
                POS(args[0].toDouble())
            } catch(e: NumberFormatException) {
                POS()
            }
        } else {
            try {
                POS(args[1].toDouble())
            } catch(e: NumberFormatException) {
                POS(args[0].toDouble())
            }
        }
        val filename = try {
            if(args.isEmpty() || args[0].toDouble() == pos.TAX_RATE) {
                "employees.dat"
            } else {
                args[0]
            }
        } catch(e: NumberFormatException) {
            args[0]
        }
        employees = pos.csvParse(filename)
        tennerLog.appendText("Started Tenner v$VER at ${Date()}.\n")
        tennerLog.appendText("Using employee list at $filename.\n")
        tennerLog.appendText("Running on ${SysProp.OS} ${SysProp.VER} ${SysProp.ARCH}.\n")
        println("Welcome to Tenner v$VER")
        while(true) {
            try {
                print("tenner> ")
                val input = readLine() ?: throw IOException("Error in input stream")
                when(input) {
                    "login" -> loginPrompt()
                    "info" -> tennerAbout()
                    "exit" -> {
                        println("Terminating Tenner.")
                        tennerLog.appendText("Exiting Tenner at ${Date()}.\n\n")
                        System.exit(0)
                    }
                    else -> println("Invalid command.")
                }
            } catch(e: Exception) {
                println("Terminating Tenner due to $e.")
                tennerLog.appendText("Exception in Tenner: $e. Exiting at ${Date()}.\n\n")
                System.exit(0)
            }
        }
    }
}
